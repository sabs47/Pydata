# Takes a file CSV file called "data.csv" and outputs each row as a numbered YAML file.
# Data in the first row of the CSV is assumed to be the column heading.

# Import the python library for parsing CSV/YAML files, updating the dates
import yaml,csv, datetime

d = datetime.today()

print( d.strftime( "%Y%m%d" ) )

today = d.strftime( "%Y%m%d" )

# Open our data file in read-mode.
csvfile = open('/habilitation/'+'today'+'_0801_Habilitations_Automatiques_OSMA_RTFE.csv', 'r')

# Save a CSV Reader object.
datareader = csv.reader(csvfile, delimiter=',', quotechar='"')

# Empty array for data headings, which we will fill with the first row from our CSV.
data_headings = []

# Loop through each row...
for row_index, row in enumerate(datareader):

	# If this is the first row, populate our data_headings variable.
	if row_index == 0:
		data_headings = "metadata_users:"

	# Otherwise, create a YAML file from the data in this row...
	else:
		# Open a new file with filename based on index number of our current row.
		filename = str(row_index) + '.yml'
		new_yaml = open(filename, 'w')

		# Empty string that we will fill with YAML formatted text based on data extracted from our CSV.
		yaml_text = ""

		# Loop through each cell in this row...
		for cell_index, cell in enumerate(row):

			# Compile a line of YAML text from our headings list and the text of the current cell, followed by a linebreak.
			# Heading text is converted to lowercase. Spaces are converted to underscores and hyphens are removed.
			# In the cell text, line endings are replaced with commas.
			cell_heading = data_headings[cell_index].lower().replace(" ", "_").replace("-", "")
			cell_text = cell_heading + ": " + cell.replace("\n", ", ") + "\n"
			cell_text += "roles :" + "\n" + "- " + data_headings[7]

			# Add this line of text to the current YAML string.
			yaml_text += cell_text

		# Write our YAML string to the new text file and close it.
		new_yaml.write(yaml_text)
		new_yaml.close()

# We're done! Close the CSV file.
#csvfile.close()
#
#groups["gkib_ied_bddf*"]= "kib_bddf_a5080ied"
#groups["gkib_ied_cdn*"]= "kib_cdn_a5080ied"
#
#for g in osma.split():
#	if g in groups:
#		classification = groups[g]
#		outfile = users_date.yml
#		break
#else:
#	print ("no groups for the new cluster")
#	
#metadata_users:
#- username: “ matricule
#	full_name: “user
#	email: “user email"
#	password: “password (vaulted)"
#roles:
#- roles_items